{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/navigation_bar.svelte","../../src/components/welcome.svelte","../../src/components/logo_link.svelte","../../src/components/skill_info.svelte","../../src/components/skill_button.svelte","../../src/components/skills.svelte","../../src/components/project-cards/project_card.svelte","../../src/components/project-cards/portfolio_pc.svelte","../../src/components/project-cards/cellular_automata_pc.svelte","../../src/components/project-cards/sorting_algorithm_visualizer_pc.svelte","../../src/components/project-cards/rust_algorithms_pc.svelte","../../src/components/project-cards/rust_data_structures_pc.svelte","../../src/components/project-cards/fixed_vectors.svelte","../../src/components/projects.svelte","../../src/components/contact.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.5' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\r\n</script>\r\n\r\n\r\n<style>\r\n    :root {\r\n        --link-box-shadow-size: 0px 0px 0px;\r\n    }\r\n\r\n    .navigation-bar-container {\r\n        position: fixed;\r\n        z-index: 100;\r\n        width: 100%;\r\n\r\n        /* Centers a fixed element horizontally! */\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n\r\n    .navigation-bar {\r\n        display: flex;\r\n        margin: auto;\r\n        width: 95%;\r\n        box-shadow: black 0.65rem 0.65rem 3rem;\r\n        transition: opacity var(--base-transition-settings);\r\n    }\r\n\r\n    .navbar-link {\r\n        flex: 1;\r\n        display: inline-block;\r\n        font-size: 1.2rem;\r\n        text-decoration: none;\r\n        text-align: center;\r\n        padding: 3px;\r\n        color: var(--button-text-color);\r\n        font-weight: 600;\r\n        position: relative;\r\n        border: none;\r\n        background-color: var(--button-foreground-color);\r\n        box-shadow: var(--link-box-shadow-size) var(--button-background-color);\r\n        transition: all var(--base-transition-settings);\r\n    }\r\n\r\n    .navbar-link::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 50%;\r\n        height: 2px;\r\n        transform: scaleX(0);\r\n        bottom: 10%;\r\n        left: 25%;\r\n        background-color: var(--button-text-color);\r\n        transform-origin: center;\r\n        transition: transform var(--base-transition-settings);\r\n    }\r\n\r\n    .navbar-link:hover::after { transform: scaleX(1); }\r\n\r\n    .navbar-link:hover {\r\n        cursor: pointer;\r\n        background-color: var(--hover-foreground-color);\r\n        box-shadow: var(--link-box-shadow-size) var(--hover-background-color);\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"navigation-bar-container\">\r\n    <nav class=\"navigation-bar\">\r\n        <!-- svelte-ignore a11y-invalid-attribute -->\r\n        <a class=\"navbar-link\" href=\"#\">Welcome</a>\r\n        <a class=\"navbar-link\" href=\"#skills\">Skills</a>\r\n        <a class=\"navbar-link\" href=\"#projects\">Projects</a>\r\n        <a class=\"navbar-link\" href=\"#contact\">Contact</a>\r\n    </nav>\r\n</div>","<script lang=\"ts\">\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n    :root {\r\n        --underline-animation-time: 1s;\r\n    }\r\n\r\n    #welcome {\r\n        display: grid;\r\n        align-content: center;\r\n        justify-content: center;\r\n\r\n        /* Todo: Find way to color based on variable */\r\n        background-image: url(\"./../background_waves.svg\");\r\n        background-position: 0% 50%;\r\n        background-size: cover;\r\n        background-repeat: repeat;\r\n        background-color: rgba(0, 0, 0, 0.25);\r\n    }\r\n\r\n    #logo {\r\n        margin: auto;\r\n        width: 20rem;\r\n        height: 20rem;\r\n    }\r\n\r\n    #logo path {\r\n        fill: var(--button-foreground-color);\r\n    }\r\n\r\n    #h2-container {\r\n        text-align: center;\r\n        margin: auto;\r\n    }\r\n\r\n    h2 {\r\n        font-size: 3rem;\r\n        overflow: hidden;\r\n    }\r\n\r\n    #hey::after {\r\n        content: \"👋\";\r\n        margin-left: 1rem;\r\n        display: inline-block;\r\n        animation: 1s wave-animation calc(var(--underline-animation-time) + 500ms) infinite;\r\n    }\r\n\r\n    #hook {\r\n        font-size: 1.5rem;\r\n        position: relative;\r\n    }\r\n\r\n    #hook::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 75%;\r\n        height: 3px;\r\n        transform: scaleX(0);\r\n        bottom: -20%;\r\n        left: 12.5%;\r\n        background-color: var(--button-foreground-color);\r\n        transform-origin: center;\r\n        animation: var(--underline-animation-time) underline-animation 500ms forwards;\r\n    }\r\n    \r\n    @keyframes underline-animation {\r\n        to {\r\n            transform: scaleX(1);\r\n        }\r\n    }\r\n\r\n    @keyframes wave-animation {\r\n        from {\r\n            transform: rotate(0deg);\r\n        }\r\n\r\n        50% {\r\n            transform: rotate(21deg);\r\n        }\r\n\r\n        to {\r\n            transform: rotate(0deg);\r\n        }\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"info-container\" id=\"welcome\">\r\n    <svg width=\"328\" height=\"368\" viewBox=\"0 0 328 368\" xmlns=\"http://www.w3.org/2000/svg\" id=\"logo\">\r\n         <g>\r\n            <path id=\"logo-path\" d=\"M134.015 82.5174C137.643 121.896 143.026 161.079 148.566 200.225C155.324 245.741 162.326 291.223 169.81 336.626C171.043 343.938 172.35 351.238 173.65 358.539C176.091 372.248 195.478 368.796 193.038 355.087C191.753 347.869 190.46 340.652 189.241 333.423C181.78 288.167 174.801 242.833 168.064 197.465C162.61 158.937 157.331 120.373 153.687 81.6232C153.055 67.7128 133.383 68.607 134.015 82.5174Z\"/>\r\n            <path id=\"logo-path\" d=\"M95.5772 233.886C97.5979 233.631 99.629 233.448 101.639 233.12C120.469 230.047 139.208 225.43 157.254 219.25C167.749 215.656 178.214 211.904 188.348 207.396C199.905 202.256 210.945 196.027 222.244 190.342C233.108 183.274 244.389 176.809 254.836 169.138C273.343 155.548 291.515 139.359 305.406 120.892C315.812 107.059 325.939 89.052 327.276 71.163C327.889 62.9531 325.176 54.8319 324.126 46.6664C319.359 39.4591 316.093 30.9932 309.825 25.0444C293.29 9.35003 270.982 3.12849 248.96 0.917283C220.119 -1.97867 185.507 2.35398 157.62 8.71109C141.491 12.3879 125.898 18.1124 110.037 22.813C74.6917 37.2926 64.1088 40.1281 32.069 58.6398C22.7372 64.0315 14.0258 70.4321 5.00424 76.3283C-6.64025 83.964 4.15833 100.432 15.8028 92.7961C24.2578 87.2322 32.4147 81.1865 41.1677 76.1044C71.7298 58.3597 81.9259 55.5919 115.663 41.6846C130.697 37.1734 145.476 31.7068 160.764 28.151C186.837 22.0869 217.798 18.126 244.805 20.1664C261.986 21.4646 279.966 25.614 293.847 36.5554C298.335 40.0931 301.076 45.4088 304.69 49.8355C305.863 55.3024 308.39 60.6479 308.209 66.2364C307.724 81.2555 299.276 96.2226 290.728 107.763C277.939 125.03 261.234 139.959 244.071 152.648C234.233 159.922 223.603 166.058 213.369 172.763C202.685 178.176 192.25 184.111 181.317 189.001C171.653 193.325 161.67 196.922 151.66 200.369C133.138 206.747 113.922 211.398 94.5422 214.22C80.6367 214.952 81.6717 234.618 95.5772 233.886V233.886Z\"/>\r\n        </g>\r\n    </svg>\r\n    <div id=\"h2-container\">\r\n        <h2 id=\"hey\">Hey, I'm Pere</h2>\r\n        <p id=\"hook\">I do software development</p>\r\n    </div>\r\n</div>","<script lang=\"ts\" context=\"module\">\r\n    /**\r\n     * Enum containing all valid icons for a `LogoLink`.\r\n     */\r\n    export enum Icons {\r\n        // PascalCaseIdentifier = ClassName,\r\n        Github = \"github\",\r\n        HackerRank = \"hacker-rank\",\r\n        LinkedIn = \"linked-in\",\r\n        CratesIO = \"crates-io\",\r\n        DocsRS = \"docs-rs\",\r\n        Website = \"website\",\r\n        Wikipedia = \"wikipedia\",\r\n    }\r\n</script>\r\n\r\n\r\n<script lang=\"ts\">\r\n    /**\r\n     * Link to redirect to when the logo has been clicked.\r\n     */\r\n    export let link: string;\r\n\r\n\r\n    /**\r\n     * Icon of the `LogoLink`.\r\n     */\r\n    export let icon: Icons;\r\n</script>\r\n\r\n\r\n<style>\r\n</style>\r\n\r\n\r\n<a href={link} class=\"{icon + \"-link\"} logo-link\">\r\n    {#if icon == Icons.Github} <!-- Github Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"{icon + \"-logo\"} logo\">\r\n            <path d=\"M10.9,2.1c-4.6,0.5-8.3,4.2-8.8,8.7c-0.5,4.7,2.2,8.9,6.3,10.5C8.7,21.4,9,21.2,9,20.8v-1.6c0,0-0.4,0.1-0.9,0.1 c-1.4,0-2-1.2-2.1-1.9c-0.1-0.4-0.3-0.7-0.6-1C5.1,16.3,5,16.3,5,16.2C5,16,5.3,16,5.4,16c0.6,0,1.1,0.7,1.3,1c0.5,0.8,1.1,1,1.4,1 c0.4,0,0.7-0.1,0.9-0.2c0.1-0.7,0.4-1.4,1-1.8c-2.3-0.5-4-1.8-4-4c0-1.1,0.5-2.2,1.2-3C7.1,8.8,7,8.3,7,7.6c0-0.4,0-0.9,0.2-1.3 C7.2,6.1,7.4,6,7.5,6c0,0,0.1,0,0.1,0C8.1,6.1,9.1,6.4,10,7.3C10.6,7.1,11.3,7,12,7s1.4,0.1,2,0.3c0.9-0.9,2-1.2,2.5-1.3 c0,0,0.1,0,0.1,0c0.2,0,0.3,0.1,0.4,0.3C17,6.7,17,7.2,17,7.6c0,0.8-0.1,1.2-0.2,1.4c0.7,0.8,1.2,1.8,1.2,3c0,2.2-1.7,3.5-4,4 c0.6,0.5,1,1.4,1,2.3v2.6c0,0.3,0.3,0.6,0.7,0.5c3.7-1.5,6.3-5.1,6.3-9.3C22,6.1,16.9,1.4,10.9,2.1z\" />\r\n        </svg>\r\n    {:else if icon == Icons.HackerRank} <!-- HackerRank Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"{icon + \"-logo\"} logo\">\r\n            <path d=\"M11.9985 2.25C10.6688 2.25 4.1514 5.98793 3.49365 7.12793C2.83515 8.26868 2.83515 15.7373 3.49365 16.8735C4.1544 18.0128 10.6718 21.75 11.9985 21.75C13.3215 21.75 19.8389 18.015 20.5019 16.8765C21.1672 15.735 21.1672 8.26054 20.5019 7.12354V7.12207C19.8337 5.98432 13.317 2.25 11.9985 2.25ZM11.9971 3.75879C13.2698 4.02354 18.3133 6.91257 19.1968 7.88232C19.6018 9.11307 19.601 14.8832 19.1968 16.1162C18.3193 17.0845 13.2713 19.9772 11.9971 20.2412C10.7236 19.9787 5.67929 17.0874 4.80029 16.1177C4.39904 14.8817 4.39904 9.11682 4.80029 7.88232C5.67704 6.91257 10.7228 4.02129 11.9971 3.75879ZM9.74999 6.75L8.24999 8.25H8.99999V15.75H10.5V12.75H13.5V15.75H12.75L14.25 17.25L15.75 15.75H15V9H13.5V11.25H10.5V8.25H11.25L9.74999 6.75Z\" />\r\n        </svg>\r\n    {:else if icon == Icons.LinkedIn} <!-- LinkedIn Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\" class=\"{icon + \"-logo\"} logo\">\r\n            <path d=\"M24,4H6C4.895,4,4,4.895,4,6v18c0,1.105,0.895,2,2,2h18c1.105,0,2-0.895,2-2V6C26,4.895,25.105,4,24,4z M10.954,22h-2.95 v-9.492h2.95V22z M9.449,11.151c-0.951,0-1.72-0.771-1.72-1.72c0-0.949,0.77-1.719,1.72-1.719c0.948,0,1.719,0.771,1.719,1.719 C11.168,10.38,10.397,11.151,9.449,11.151z M22.004,22h-2.948v-4.616c0-1.101-0.02-2.517-1.533-2.517 c-1.535,0-1.771,1.199-1.771,2.437V22h-2.948v-9.492h2.83v1.297h0.04c0.394-0.746,1.356-1.533,2.791-1.533 c2.987,0,3.539,1.966,3.539,4.522V22z\" />\r\n        </svg>\r\n    {:else if icon == Icons.CratesIO} <!-- CratesIO Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\" class=\"{icon + \"-logo\"} logo\">\r\n            <path d=\"M10 7L14.5 5L19.25 7L24 9V15V21L19.5 23L14.5 25L10 23L5 20.5V15L10 13V10.5V7Z\" />\r\n            <path d=\"M10 7L14.5 5L19.25 7M10 7L14.5 9M10 7V10.5M14.5 9L10 10.5M14.5 9L19 11M14.5 9L19.25 7M10 10.5L14.5 12.5M10 10.5V13M10 17L14.5 19M10 17V23M10 17L5 15M10 17V13M14.5 19V12.5M14.5 19L19.25 17M14.5 19V25M14.5 12.5L19 11M24 9V15M24 9L19.25 7M24 9L19.25 10.9M24 15V21L19.5 23M24 15L19.5 16.8947M19 11L19.25 10.9M19.25 10.9V17M19.25 17L19.5 16.8947M19.5 23V16.8947M19.5 23L14.5 25M14.5 25L10 23M10 23L5 20.5V15M5 15L10 13\" stroke=\"black\" stroke-width=\"0.25\" stroke-linejoin=\"round\"/>\r\n        </svg>\r\n    {:else if icon == Icons.DocsRS} <!-- DocsRS Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"{icon + \"-logo\"} logo\">\r\n            <path id=\"Vector\" d=\"M21.0859 11.5244L17.3125 10.1103V5.87207C17.3125 5.28613 16.9492 4.76269 16.3984 4.55566L12.4922 3.09082C12.1758 2.96973 11.8242 2.96973 11.5039 3.09082L7.59766 4.55566C7.04688 4.76269 6.68359 5.28613 6.68359 5.87207V10.1103L2.91016 11.5244C2.36328 11.7314 2 12.2549 2 12.8408V17.1416C2 17.6728 2.30078 18.1611 2.77734 18.3994L6.68359 20.3525C7.07813 20.5518 7.54688 20.5518 7.94141 20.3525L12 18.3213L16.0586 20.3525C16.4531 20.5518 16.9219 20.5518 17.3164 20.3525L21.2227 18.3994C21.6992 18.1611 22 17.6728 22 17.1416V12.8408C22 12.2549 21.6367 11.7314 21.0859 11.5244V11.5244ZM15.9844 10.1416L12.6641 11.3877V8.72363L15.9844 7.27832V10.1416ZM8.01562 5.81738L12 4.32519L15.9844 5.81738V5.84082L12 7.45801L8.01562 5.84082V5.81738ZM11.2969 17.1885L7.97656 18.8486V15.7588L11.2969 14.2432V17.1885ZM11.2969 12.8135L7.3125 14.4307L3.32812 12.8135V12.79L7.3125 11.2978L11.2969 12.79V12.8135ZM20.6719 17.1885L17.3516 18.8486V15.7588L20.6719 14.2432V17.1885ZM20.6719 12.8135L16.6875 14.4307L12.7031 12.8135V12.79L16.6875 11.2978L20.6719 12.79V12.8135Z\" />\r\n        </svg>\r\n    {:else if icon == Icons.Website} <!-- Website Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"{icon + \"-logo\"} logo\">\r\n            <path d=\"M19.4766 16L18.7676 12.0039H18.4746L17.9941 10.4922H19.4766L20.2617 14.5234H20.3789L20.748 9.78906H22.2363L21.6855 16H19.4766ZM2.31445 16L1.76367 9.78906H3.25195L3.62109 14.5234H3.73828L4.52344 10.4922H6.00586L5.50195 12.0039H5.23242L4.47656 16H2.31445ZM6.02344 16L5.30273 12.0039H5.00977L4.52344 10.4922H6.00586L6.82031 14.5234H6.9375V16H6.02344ZM6.82031 16V14.5234H6.9375L7.83398 10.4922H9.32227L8.71875 12.0039H8.54297L7.69336 16H6.82031ZM9.35742 16L8.61328 12.0039H8.32031L7.83398 10.4922H9.32227L10.1602 14.5234H10.2773V16H9.35742ZM10.1602 16V14.5234H10.2773L11.2559 10.4922H12.7441L12.1406 12.0039H11.9648L11.0801 16H10.1602ZM12.9199 16L12.0352 12.0039H11.7422L11.2559 10.4922H12.7441L13.7227 14.5234H13.8398V16H12.9199ZM13.7227 16V14.5234H13.8398L14.6777 10.4922H16.166L15.5625 12.0039H15.3867L14.6426 16H13.7227ZM16.2598 16L15.457 12.0039H15.1641L14.6777 10.4922H16.166L17.0625 14.5234H17.1797V16H16.2598ZM17.0625 16V14.5234H17.1797L17.9941 10.4922H19.4766L18.873 12.0039H18.6973L17.9766 16H17.0625Z\" />\r\n        </svg>\r\n    {:else if icon == Icons.Wikipedia} <!-- Wikipedia Icon -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"{icon + \"-logo\"} logo\">\r\n            <path id=\"W\" d=\"M23.1328 4.10938V4.54297C22.7188 4.54297 22.3828 4.61719 22.125 4.76562C21.8672 4.91406 21.6211 5.19141 21.3867 5.59766C21.2305 5.87109 20.9844 6.52344 20.6484 7.55469L16.2188 20.3633H15.75L12.1289 10.2031L8.53125 20.3633H8.10938L3.38672 7.16797C3.03516 6.18359 2.8125 5.60156 2.71875 5.42188C2.5625 5.125 2.34766 4.90625 2.07422 4.76562C1.80859 4.61719 1.44531 4.54297 0.984375 4.54297V4.10938H6.86719V4.54297H6.58594C6.17188 4.54297 5.85547 4.63672 5.63672 4.82422C5.41797 5.01172 5.30859 5.23828 5.30859 5.50391C5.30859 5.77734 5.48047 6.40625 5.82422 7.39062L8.95312 16.3086L11.5898 8.72656L11.1211 7.39062L10.7461 6.32422C10.582 5.93359 10.3984 5.58984 10.1953 5.29297C10.0938 5.14453 9.96875 5.01953 9.82031 4.91797C9.625 4.77734 9.42969 4.67578 9.23438 4.61328C9.08594 4.56641 8.85156 4.54297 8.53125 4.54297V4.10938H14.7188V4.54297H14.2969C13.8594 4.54297 13.5391 4.63672 13.3359 4.82422C13.1328 5.01172 13.0312 5.26563 13.0312 5.58594C13.0312 5.98438 13.207 6.67969 13.5586 7.67188L16.6055 16.3086L19.6289 7.55469C19.9727 6.58594 20.1445 5.91406 20.1445 5.53906C20.1445 5.35938 20.0859 5.19141 19.9688 5.03516C19.8594 4.87891 19.7188 4.76953 19.5469 4.70703C19.25 4.59766 18.8633 4.54297 18.3867 4.54297V4.10938H23.1328Z\" />\r\n        </svg>\r\n    {/if}\r\n</a>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"./logo_link.svelte\";\r\n\r\n\r\n    /**\r\n     * `Object` from the parsed `json` file within `SkillButton`.\r\n     */\r\n    export let obj: Object;\r\n\r\n\r\n    /**\r\n     * Reference to the Background of the `SkillInfo`.\r\n     */\r\n    let bg_ref: HTMLElement | null;\r\n</script>\r\n\r\n\r\n<style>\r\n    .skill-info {\r\n        animation: fade-in 200ms linear;\r\n    }\r\n\r\n    .background {\r\n        position: fixed;\r\n        background-color: rgba(26, 26, 26, 0.75);\r\n        display: flex;\r\n        z-index: 2000;\r\n        height: 100%;\r\n        width: 100%;\r\n        top: 0;\r\n        left: 0;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .info-box {\r\n        background-color: rgb(48, 48, 48);\r\n        padding: 0.25rem 1rem;\r\n        overflow-y: scroll;\r\n        height: 80%;\r\n        width: 80%;\r\n\r\n        background-size: 175% 175%;\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-blend-mode: multiply;\r\n        box-shadow: 0rem 0.5rem 0.5rem #101010;\r\n    }\r\n\r\n    .info-box header {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .info-box :global(.logo) {\r\n        width: 4rem;\r\n        height: 4rem;\r\n        fill: var(--button-foreground-color);\r\n        transition: fill var(--base-transition-settings);\r\n    }\r\n\r\n    .info-box :global(.logo:hover) {\r\n        fill: var(--hover-foreground-color);\r\n    }\r\n\r\n    .details {\r\n        display: grid;\r\n        gap: 0.5rem;\r\n    }\r\n\r\n    .details-card .list {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    .tags .list {\r\n        gap: 0.25em;\r\n    }\r\n\r\n    .tag {\r\n        background-color: var(--button-foreground-color);\r\n        color: var(--base-text-color);\r\n        padding: 0.25em;\r\n    }\r\n\r\n    @keyframes fade-in {\r\n        0% { opacity: 0%; }\r\n        100% { opacity: 100%; }\r\n    }\r\n\r\n    @keyframes fade-out {\r\n        0% { opacity: 100%; }\r\n        100% { opacity: 0%; }\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"skill-info background\" bind:this={bg_ref} on:click|self={() => bg_ref.parentNode.removeChild(bg_ref)}>\r\n    <div class=\"info-box {obj[\"background\"]}\">\r\n        <header>\r\n            <h1 class=\"name\">{obj[\"name\"]}</h1>\r\n        </header>\r\n        <div class=\"details\">\r\n            {#if \"description\" in obj}\r\n                <div class=\"details-card description\">\r\n                    <h2>Description</h2>\r\n                    <p>{obj[\"description\"]}</p>\r\n                </div>\r\n            {/if}\r\n            {#if \"tags\" in obj}\r\n                <div class=\"details-card tags\">\r\n                    <h2>Tags</h2>\r\n                    <div class=\"list\">\r\n                        {#each obj[\"tags\"] as tag}\r\n                            <strong class=\"tag\">{tag}</strong>\r\n                        {/each}\r\n                    </div>\r\n                </div>\r\n            {/if}\r\n            {#if \"links\" in obj}\r\n                <div class=\"details-card links\">\r\n                    <h2>Links</h2>\r\n                    <div class=\"list\">\r\n                        {#each obj[\"links\"] as link}\r\n                            <LogoLink link={link[\"link\"]} icon={link[\"icon\"]} />\r\n                        {/each}\r\n                    </div>\r\n                </div>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n</div>","<script lang=\"ts\">\r\n    import SkillInfo from \"./skill_info.svelte\";\r\n\r\n    /**\r\n     * Contains the path of the `.json` file coresponding to the Skill.\r\n     */\r\n    export let json: string;\r\n\r\n\r\n    /**\r\n     * Contains a `Promise` containing the `Object` of the `json` File.\r\n     */\r\n    let json_promise: Promise<Object> = fetch_json();\r\n\r\n\r\n    /**\r\n     * Fetches the `.json` file at the path of the `json` prop, \r\n     * setting `json_promise` to the `Promise` of the `Object`.\r\n     */\r\n    async function fetch_json(): Promise<Object> {\r\n        console.log(json);\r\n        const response = await fetch(json);\r\n        const obj = await response.json();\r\n\r\n        if (response.ok) {\r\n            return obj;\r\n        }\r\n        \r\n        throw new Error(obj);\r\n    }\r\n\r\n    /**\r\n     * Pops up a `SkillInfo` Component coresponding to the items within the passed through `skill_obj`.\r\n     */\r\n    function add_skill_info(skill_obj: Object) {\r\n        let _ = new SkillInfo({\r\n            target: document.body,\r\n            props: {\r\n                obj: skill_obj,\r\n            },\r\n        });\r\n    }\r\n</script>\r\n\r\n\r\n<style>\r\n    h3 {\r\n        font-size: 1.75rem;\r\n        font-weight: 700;\r\n        text-align: center;\r\n    }\r\n    \r\n    .skill-button {\r\n        color: var(--base-text-color);\r\n        text-decoration: none;\r\n        background-size: 190% 190%;\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-blend-mode: multiply;\r\n        border: none;\r\n        box-shadow: 0rem 0.5rem 0.5rem #101010;\r\n    }\r\n\r\n    .skill-button:hover { background-size: 115% 115%; }\r\n</style>\r\n\r\n\r\n{#await json_promise then skill_obj}\r\n    <button class=\"link-button skill-button {skill_obj[\"background\"]}\" on:click={() => { add_skill_info(skill_obj) }}>\r\n        <h3>{skill_obj[\"name\"]}</h3>\r\n    </button>\r\n{/await}","<script lang=\"ts\">\r\n    import SkillButton from \"./skill_button.svelte\";\r\n</script>\r\n\r\n\r\n<style>\r\n    .info-container {\r\n        display: grid;\r\n        gap: 1rem;\r\n    }\r\n\r\n    .info-card-container {\r\n        display: grid;\r\n        gap: 1.5rem;\r\n        justify-content: center;\r\n        grid-template-columns: repeat(auto-fill, minmax(17rem, 1fr));\r\n    }\r\n\r\n    h1 { font-size: 2.25rem; }\r\n    h2 { font-size: 2rem; }\r\n</style>\r\n\r\n\r\n<div class=\"info-container\" id=\"skills\">\r\n    <h1 class=\"section-title\">Skills</h1>\r\n    <!-- TODO: Maybe do a svelte loop to make these? -->\r\n    <div class=\"languages-container\">\r\n        <h2 class=\"section-title\">Languages 💬</h2>\r\n        <div class=\"info-card-container\">\r\n            <SkillButton json=\"skills/python.json\" />\r\n            <SkillButton json=\"skills/rust.json\" />\r\n            <SkillButton json=\"skills/go.json\" />\r\n            <SkillButton json=\"skills/java_script.json\" />\r\n            <SkillButton json=\"skills/type_script.json\" />\r\n            <SkillButton json=\"skills/html.json\" />\r\n            <SkillButton json=\"skills/css.json\" />\r\n            <SkillButton json=\"skills/sql.json\" />\r\n            <SkillButton json=\"skills/c.json\" />\r\n            <SkillButton json=\"skills/cpp.json\" />\r\n            <SkillButton json=\"skills/csharp.json\" />\r\n            <SkillButton json=\"skills/lua.json\" />\r\n            <SkillButton json=\"skills/gdscript.json\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"libraies-engines-and-frameworks-container\">\r\n        <h2 class=\"section-title\">Libraries, Engines & Frameworks 📚</h2>\r\n        <div class=\"info-card-container\">\r\n            <SkillButton json=\"skills/matplotlib.json\" />\r\n            <SkillButton json=\"skills/pandas.json\" />\r\n            <SkillButton json=\"skills/numpy.json\" />\r\n            <SkillButton json=\"skills/pytest.json\" />\r\n            <SkillButton json=\"skills/flask.json\" />\r\n            <SkillButton json=\"skills/mediapipe.json\" />\r\n            <SkillButton json=\"skills/opencv.json\" />\r\n            <SkillButton json=\"skills/rust_cpython.json\" />\r\n            <SkillButton json=\"skills/sqlite.json\" />\r\n            <SkillButton json=\"skills/react.json\" />\r\n            <SkillButton json=\"skills/vue.json\" />\r\n            <SkillButton json=\"skills/svelte.json\" />\r\n            <SkillButton json=\"skills/tailwind.json\" />\r\n            <SkillButton json=\"skills/godot.json\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"misc-tech-container\">\r\n        <h2 class=\"section-title\">Miscellaneous Technologies ❓</h2>\r\n        <div class=\"info-card-container\">\r\n            <SkillButton json=\"skills/google.json\" />\r\n            <SkillButton json=\"skills/git.json\" />\r\n            <SkillButton json=\"skills/npm.json\" />\r\n            <SkillButton json=\"skills/web_assembly.json\" />\r\n        </div>\r\n    </div>\r\n</div>","<script lang=\"ts\">\r\n    /**\r\n     * Title of the Project.\r\n     */\r\n    export let title: string;\r\n\r\n    /**\r\n     * Description of the Project.\r\n     */\r\n    export let description: string;\r\n\r\n    /**\r\n     * URL for the background image of the repository.\r\n     */\r\n    export let background_url: string;\r\n</script>\r\n\r\n\r\n<style>\r\n    .project-card {\r\n        min-height: 15rem;\r\n        text-align: center;\r\n        position: relative;\r\n        z-index: 2;\r\n        display: grid;\r\n        align-content: center;\r\n    }\r\n\r\n    .bg-image {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        z-index: -1;\r\n        box-sizing: border-box;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        background-size: cover;\r\n        filter: blur(3px) brightness(0.25);\r\n        border-radius: var(--border-radius);\r\n    }\r\n\r\n    .logo-link-container {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-content: center;\r\n    }\r\n\r\n    .project-card :global(.logo) {\r\n        width: 4rem;\r\n        height: 4rem;\r\n        fill: var(--button-foreground-color);\r\n        transition: fill var(--base-transition-settings);\r\n    }\r\n\r\n    .project-card :global(.logo:hover) {\r\n        fill: var(--hover-foreground-color);\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"project-card\">\r\n    <div class=\"bg-image\" style=\"background-image: url({background_url})\" />\r\n    <div class=\"project-card-details\">\r\n        <h1>{title}</h1>\r\n        <p>{description}</p>\r\n        <slot name=\"status-badge\" />\r\n        <slot name=\"logo-link-container\" class=\"logo-link-container\" />\r\n    </div>\r\n</div>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Portfolio\"\r\n    description=\"My personal portfolio site, the site you're seeing right now.\"\r\n    background_url=\"./projects/portfolio.png\"\r\n>\r\n    <div slot=\"status-badge\">\r\n        <img src=\"https://img.shields.io/github/license/c1m50c/portfolio?color=blue&style=for-the-badge\" alt=\"License\" />\r\n        <img src=\"https://img.shields.io/tokei/lines/github/c1m50c/portfolio?style=for-the-badge\" alt=\"Lines of Code\" />\r\n    </div>\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/portfolio\" icon={Icons.Github} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Cellular Automata\"\r\n    description=\"Python project implementing Conway's Game of Life with PyGame.\"\r\n    background_url=\"./projects/cellular-automata.gif\"\r\n>\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/cellular-automata\" icon={Icons.Github} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Sorting Algorithm Visualizer\"\r\n    description=\"Visualizes various sorting algorithms using Matplotlib and Python.\"\r\n    background_url=\"./projects/sorting-algorithm-visualizer.gif\"\r\n>\r\n    <div slot=\"status-badge\">\r\n        <img src=\"https://img.shields.io/github/workflow/status/c1m50c/sorting-algorithm-visualizer/Tests?style=for-the-badge\" alt=\"Tests\" />\r\n        <img src=\"https://img.shields.io/github/license/c1m50c/sorting-algorithm-visualizer?color=blue&style=for-the-badge\" alt=\"License\" />\r\n        <img src=\"https://img.shields.io/tokei/lines/github/c1m50c/sorting-algorithm-visualizer?style=for-the-badge\" alt=\"Lines of Code\" />\r\n    </div>\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/sorting-algorithm-visualizer\" icon={Icons.Github} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Rust Algorithms\"\r\n    description=\"A Rust library implementing various algorithms.\"\r\n    background_url=\"./projects/rust-algorithms.png\"\r\n>\r\n    <img slot=\"status-badge\" src=\"https://github.com/c1m50c/rust-algorithms/actions/workflows/build.yml/badge.svg?branch=main\" alt=\"Build Status\" />\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/rust-algorithms\" icon={Icons.Github} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Rust Data Structures\"\r\n    description=\"A library implementing various Data Structures in Rust, made strictly for learning purposes.\"\r\n    background_url=\"./projects/rust-data-structures.png\"\r\n>\r\n    <img slot=\"status-badge\" src=\"https://github.com/c1m50c/rust-data-structures/actions/workflows/build.yml/badge.svg?branch=main\" alt=\"Build Status\" />\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/rust-data-structures\" icon={Icons.Github} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"../logo_link.svelte\";\r\n    import ProjectCard from \"./project_card.svelte\";\r\n</script>\r\n\r\n\r\n<ProjectCard\r\n    title=\"Fixed Vectors\"\r\n    description=\"Library implementing fixed-length Vectors meant for representing dimensional values. \"\r\n    background_url=\"./projects/fixed-vectors.png\"\r\n>\r\n    <div slot=\"status-badge\">\r\n        <img src=\"https://img.shields.io/github/workflow/status/c1m50c/fixed-vectors/Build?style=for-the-badge\" alt=\"Build\" />\r\n        <img src=\"https://img.shields.io/crates/v/fixed-vectors?color=orange&style=for-the-badge\" alt=\"CratesIO\" />\r\n        <img src=\"https://img.shields.io/crates/l/fixed-vectors?style=for-the-badge\" alt=\"License\" />\r\n        <img src=\"https://img.shields.io/tokei/lines/github/c1m50c/fixed-vectors?style=for-the-badge\" alt=\"Lines of Code\" />\r\n        <img src=\"https://img.shields.io/github/stars/c1m50c/fixed-vectors?style=for-the-badge\" alt=\"Github Stars\" />\r\n    </div>\r\n    <div slot=\"logo-link-container\">\r\n        <LogoLink link=\"https://github.com/c1m50c/fixed-vectors\" icon={Icons.Github} />\r\n        <LogoLink link=\"https://crates.io/crates/fixed-vectors/\" icon={Icons.CratesIO} />\r\n        <LogoLink link=\"https://docs.rs/crate/fixed-vectors/latest\" icon={Icons.DocsRS} />\r\n    </div>\r\n</ProjectCard>","<script lang=\"ts\">\r\n    import PortfolioPc from \"./project-cards/portfolio_pc.svelte\";\r\n    import CellularAutomataPc from \"./project-cards/cellular_automata_pc.svelte\";\r\n    import SortingAlgorithmVisualizerPc from \"./project-cards/sorting_algorithm_visualizer_pc.svelte\";\r\n    import RustAlgorithmsPc from \"./project-cards/rust_algorithms_pc.svelte\";\r\n    import RustDataStructuresPc from \"./project-cards/rust_data_structures_pc.svelte\";\r\n    import FixedVectors from \"./project-cards/fixed_vectors.svelte\";\r\n</script>\r\n\r\n\r\n<style>\r\n    .project-card-container {\r\n        display: grid;\r\n        gap: 1.5rem;\r\n        grid-template-columns: repeat(auto-fill, minmax(1fr, 20rem));\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"info-container\" id=\"projects\">\r\n    <h1 class=\"section-title\">Projects</h1>\r\n    <div class=\"project-card-container\">\r\n        <PortfolioPc />\r\n        <FixedVectors />\r\n        <SortingAlgorithmVisualizerPc />\r\n        <CellularAutomataPc />\r\n        <RustAlgorithmsPc />\r\n        <RustDataStructuresPc />\r\n    </div>\r\n</div>","<script lang=\"ts\">\r\n    import LogoLink, { Icons } from \"./logo_link.svelte\";\r\n\r\n    const email: string = \"pereiswell@gmail.com\";\r\n    const github_profile: string = \"https://github.com/c1m50c\";\r\n    const hacker_rank_profile: string = \"https://www.hackerrank.com/c1m50c\";\r\n    const linked_in_profile: string = \"https://www.linkedin.com/in/pere-wells\";\r\n    \r\n    /** Copys a string into the user's clipboard. */\r\n    function copy_to_clipboard(str: string) {\r\n        navigator.clipboard.writeText(str);\r\n    }\r\n</script>\r\n\r\n\r\n<style>\r\n    #contact {\r\n        display: grid;\r\n        justify-content: center;\r\n    }\r\n\r\n    .logo-link-container {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    .logo-link-container :global(.logo) {\r\n        fill: var(--button-foreground-color);\r\n        width: 5rem;\r\n        height: 5rem;\r\n        transition: all var(--base-transition-settings);\r\n\r\n    }\r\n\r\n    .logo-link-container :global(.logo:hover) { fill: var(--hover-foreground-color); }\r\n\r\n    #email {\r\n        background: transparent;\r\n        border: none;\r\n        color: var(--button-foreground-color);\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n        font-style: italic;\r\n        text-align: center;\r\n        position: relative;\r\n        transition: all var(--base-transition-settings);\r\n    }\r\n\r\n    #email:hover {\r\n        cursor: pointer;\r\n        color: var(--hover-foreground-color);\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"info-container\" id=\"contact\">\r\n    <div class=\"logo-link-container\">\r\n        <LogoLink link={github_profile} icon={Icons.Github} />\r\n        <LogoLink link={hacker_rank_profile} icon={Icons.HackerRank} />\r\n        <LogoLink link={linked_in_profile} icon={Icons.LinkedIn} />\r\n    </div>\r\n    <button id=\"email\" on:click={() => {copy_to_clipboard(email)}}>{email}</button>\r\n</div>","<script lang=\"ts\">\r\n    import NavigationBar from \"./components/navigation_bar.svelte\";\r\n    import Welcome from \"./components/welcome.svelte\";\r\n    // import About from \"./components/about.svelte\";\r\n    import Skills from \"./components/skills.svelte\";\r\n    import Projects from \"./components/projects.svelte\";\r\n    import Contact from \"./components/contact.svelte\";\r\n</script>\r\n\r\n\r\n<style>\r\n    :global(:root) {\r\n        --base-text-color: rgb(35, 41, 49);\r\n        --bright-text-color: rgb(238, 238, 238);\r\n        --button-text-color: var(--base-text-color);\r\n        --info-container-bg-color: rgb(30, 30, 30);\r\n        --button-foreground-color: rgb(28, 194, 117);\r\n        --button-background-color: rgb(33, 126, 83);\r\n        --hover-foreground-color: rgb(102, 226, 168);\r\n        --hover-background-color: rgb(67, 135, 103);\r\n        --base-transition-settings: 600ms ease;\r\n        --border-radius: 0.75rem;\r\n    }\r\n\r\n    :global(.info-container) {\r\n        padding: 1rem;\r\n        background-color: var(--info-container-bg-color);\r\n        border-radius: var(--border-radius);\r\n    }\r\n\r\n    :global(.link-button) {\r\n        display: flexbox;\r\n        padding: 0.25rem;\r\n        position: relative;\r\n        justify-content: center;\r\n        text-align: center;\r\n        align-content: center;\r\n        text-decoration: none;\r\n        background-color: var(--button-foreground-color);\r\n        color: var(--base-text-color);\r\n        transition: all var(--base-transition-settings);\r\n    }\r\n\r\n    :global(.link-button::after) {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 50%;\r\n        height: 2px;\r\n        transform: scaleX(0);\r\n        bottom: 25%;\r\n        left: 25%;\r\n        background-color: var(--button-text-color);\r\n        transform-origin: center;\r\n        transition: transform var(--base-transition-settings);\r\n    }\r\n\r\n    :global(.link-button:hover::after) {\r\n        transform: scaleX(1);\r\n    }\r\n\r\n    :global(.link-button:hover) {\r\n        cursor: pointer;\r\n        background-color: var(--hover-foreground-color);\r\n    }\r\n\r\n    :global(.section-title) {\r\n        text-align: center;\r\n    }\r\n\r\n    :global(.python) { background-image: url(\"./../logos/languages/python.svg\"); }\r\n    :global(.rust) { background-image: url(\"./../logos/languages/rust.svg\"); }\r\n    :global(.go) { background-image: url(\"./../logos/languages/go.svg\"); }\r\n    :global(.java-script) { background-image: url(\"./../logos/languages/java_script.svg\"); }\r\n    :global(.type-script) { background-image: url(\"./../logos/languages/type_script.svg\"); }\r\n    :global(.html) { background-image: url(\"./../logos/languages/html.svg\"); }\r\n    :global(.css) { background-image: url(\"./../logos/languages/css.svg\"); }\r\n    :global(.sql) { background-image: url(\"./../logos/languages/sql.svg\"); }\r\n    :global(.c) { background-image: url(\"./../logos/languages/c.svg\"); }\r\n    :global(.cpp) { background-image: url(\"./../logos/languages/cpp.svg\"); }\r\n    :global(.c-sharp) { background-image: url(\"./../logos/languages/c_sharp.svg\"); }\r\n    :global(.lua) { background-image: url(\"./../logos/languages/lua.svg\"); }\r\n    :global(.godot) { background-image: url(\"./../logos/godot.svg\"); }\r\n    :global(.google) { background-image: url(\"./../logos/google.svg\"); }\r\n    :global(.git) { background-image: url(\"./../logos/git.svg\"); }\r\n    :global(.web-assembly) { background-image: url(\"./../logos/web_assembly.svg\"); }\r\n\r\n    main {\r\n        gap: 2rem;\r\n        display: grid;\r\n        padding: 3rem 1rem;\r\n    }\r\n</style>\r\n\r\n\r\n<NavigationBar/>\r\n<main>\r\n    <Welcome/>\r\n    <Skills/>\r\n    <Projects/>\r\n    <Contact/>\r\n</main>","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {}\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","handle_promise","promise","info","token","type","index","resolved","child_ctx","current","needs_flush","blocks","m","mount","then","error","catch","hasCatch","pending","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","indexOf","splice","$set","$$props","obj","$$set","keys","Icons","Github","HackerRank","LinkedIn","CratesIO","DocsRS","Website","Wikipedia","link","icon","call","bg_ref","__awaiter","thisArg","_arguments","P","generator","json","json_promise","console","log","response","fetch","ok","fetch_json","add_skill_info","skill_obj","SkillInfo","body","title","description","background_url","github_profile","hacker_rank_profile","linked_in_profile","email","str","navigator","clipboard","writeText"],"mappings":"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"}